{"version":3,"sources":["components/Header.tsx","components/Bar.tsx","components/Settings.tsx","components/Algorithms.tsx","components/BarChart.tsx","components/Content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","title","text","className","map","v","k","key","Bar","forwardRef","props","ref","value","width","speed","myRef","createRef","style","height","transition","color","overflowWrap","textAlign","algos","algoOptions","reduce","algo","item","label","groupStyles","display","alignItems","justifyContent","groupBadgeStyles","backgroundColor","borderRadius","fontWeight","lineHeight","minWidth","padding","formatGroupLabel","data","options","length","Settings","setArraySize","setSpeed","setMax","setOption","regenerate","useState","setInnerSpeed","arraySize","setInnerArraySize","max","setInnerMax","selectedOption","setSelectedOption","htmlFor","name","type","min","onChange","e","target","isNaN","onKeyDown","currentTarget","required","placeholder","onClick","bubbleSort","array","set","a","async","i","j","temp","quickSort","partition","left","right","pivot","_qsort","mergeSort","_mergeSort","arr1","arr2","mid","Math","floor","heapSort","heapify","arr","n","largest","_heapSort","BarChart","algoOption","setArray","refsArray","rerender","useEffect","changeBarValue","node","old_bgColor","toString","Promise","resolve","_","setTimeout","textContent","container","document","querySelector","modal","opacity","body","onclick","sortStart","Content","setAlgoOption","generate","array_data","number","random","push","aria-hidden","data-backdrop","data-keyboard","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAsBeA,G,MAfiB,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KACxC,OACE,yBAAKC,UAAU,UACb,4BAAQA,UAAU,kBAChB,wBAAIA,UAAU,gBACXF,GAEHC,EAAOA,EAAKE,KAAI,SAACC,EAAGC,GACnB,OAAO,wBAAIC,IAAKD,GAAID,MACjB,yC,uBCgBIG,EAtBHC,sBAAuB,SAACC,EAAOC,GAAS,IAC1CC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,MAAOC,EAAUJ,EAAVI,MAChBC,EAAQC,sBACd,OACE,oCACE,yBAAKL,IAAKI,GACR,yBAAKJ,IAAKA,EACRM,MAAO,CACLC,OAAQN,EAAOC,MAAOA,EAAOM,WAAW,UAAD,OAAY,IAAOL,EAAnB,WACvCM,MAAO,QAASC,aAAc,aAC9BC,UAAW,WAEZZ,EAAME,Y,cCfJW,EAAkB,CAAC,cAAe,aAAc,aAAc,aAErEC,EAAcD,EAAME,QAAO,SAACC,EAAgBC,GAChD,MAAM,GAAN,mBAAWD,GAAX,CAAiB,CAAEd,MAAOe,EAAMC,MAAOD,OACtC,IAEGE,EAAmC,CACvCC,QAAS,OACTC,WAAY,SACZC,eAAgB,iBAGZC,EAAwC,CAC5CC,gBAAiB,UACjBC,aAAc,MACdf,MAAO,UACPU,QAAS,eACTM,WAAY,SACZC,WAAY,IACZC,SAAU,EACVC,QAAS,2BACTjB,UAAW,UAGPkB,EAAgD,SAACC,GAAD,OACpD,yBAAKxB,MAAOY,GACV,8BAAOY,EAAKb,OACZ,0BAAMX,MAAOgB,GAAmBQ,EAAKC,QAAQC,UAYpCC,EAAkC,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,aAAcC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAAiB,EAC7EC,mBA3CI,KA0CyE,mBACrGpC,EADqG,KAC9FqC,EAD8F,OAErED,mBA7CL,IA2C0E,mBAErGE,EAFqG,KAE1FC,EAF0F,OAGjFH,mBA5CM,KAyC2E,mBAGrGI,EAHqG,KAGhGC,EAHgG,OAIhEL,mBAA4B1B,EAAY,IAJwB,mBAIrGgC,EAJqG,KAIrFC,EAJqF,KAK5G,OACE,yBAAKtD,UAAU,qBACb,yBAAKA,UAAU,iBACb,2BAAOuD,QAAQ,SAAf,UACA,2BAAOC,KAAK,QAAQC,KAAK,QAAQC,IAAK,GAAIP,IAAK,IAAM1C,MAAOE,EAC1DgD,SAAU,SAAAC,GACRZ,GAAeY,EAAEC,OAAOpD,OACxBkC,GAAUiB,EAAEC,OAAOpD,WAGzB,yBAAKT,UAAU,cACb,2BAAOyD,KAAK,OAAOD,KAAK,YAAY/C,MAAOwC,EACzCU,SAAU,SAAAC,GAAC,OACTV,EAAmBY,OAAOF,EAAEC,OAAOpD,OA7DX,IA6DqBmD,EAAEC,OAAOpD,QACxDsD,UAAW,SAACH,GACV,GAAc,UAAVA,EAAExD,IAAiB,CACrB,IAAMK,GAAUmD,EAAEI,cAAcvD,MAAQ,GAAK,IACzCmD,EAAEI,cAAcvD,MAAQ,IAAO,KAAOmD,EAAEI,cAAcvD,MAC1DyC,EAAkBzC,GAClBiC,EAAajC,KAGfwD,UAAQ,IACZ,2BAAOV,QAAQ,aAAf,UAIF,yBAAKvD,UAAU,cACb,2BAAOyD,KAAK,OAAOhD,MAAO0C,EACxBQ,SAAU,SAAAC,GAAC,OAAIR,EAAaU,OAAOF,EAAEC,OAAOpD,OA3EnB,KA2E6BmD,EAAEC,OAAOpD,QAC/DsD,UAAW,SAACH,GACV,GAAc,UAAVA,EAAExD,IAAiB,CACrB,IAAMK,GAAUmD,EAAEI,cAAcvD,MAAQ,GAAK,IACzCmD,EAAEI,cAAcvD,MAAQ,IAAO,KAAOmD,EAAEI,cAAcvD,MAC1D2C,EAAY3C,GACZmC,EAAOnC,KAER+C,KAAK,YAAYS,UAAQ,IAC9B,2BAAOV,QAAQ,aAAf,eAIF,yBAAKvD,UAAU,gBACb,kBAAC,IAAD,CACEA,UAAU,eACVkE,YAAY,cACZzD,MAAO4C,EACPM,SAAU,SAACC,GACTN,EAAkBM,GACdA,GACFf,EAAWe,EAAanD,QAG5B8B,QAASlB,EACTgB,iBAAkBA,KAGtB,6BACE,4BAAQ8B,QAAS,kBAAMrB,EAAWG,EAAWE,KAA7C,mBC3GKiB,EAAa,SAAMC,EAAgBC,GAAtB,mBAAAC,EAAAC,OAAA,gDACfC,EAAI,EADW,YACRA,EAAIJ,EAAM7B,OAAS,GADX,iBAEbkC,EAAID,EAAI,EAFK,YAEFC,EAAIL,EAAM7B,QAFR,sBAGhB6B,EAAMI,GAAKJ,EAAMK,IAHD,wBAIZC,EAAON,EAAMI,GAJD,WAAAF,EAAA,MAKZD,EAAIG,EAAGJ,EAAMK,KALD,0BAAAH,EAAA,MAMZD,EAAII,EAAGC,IANK,QAOlBN,EAAMI,GAAKJ,EAAMK,GACjBL,EAAMK,GAAKC,EARO,UAEkBD,EAFlB,yBACgBD,EADhB,sDAcbG,EAAY,SAAMP,EAAgBC,GAAtB,iBAAAC,EAAAC,OAAA,uDACjBK,EAAY,SAAMR,EAAgBS,EAAcC,GAApC,uBAAAR,EAAAC,OAAA,gDACZQ,EAAQX,EAAMU,GACdN,EAAIK,EAAO,EACNJ,EAAII,EAHG,YAGGJ,EAAIK,GAHP,sBAIVV,EAAMK,GAAKM,GAJD,yBAKVP,EACIE,EAAcN,EAAMI,GANd,WAAAF,EAAA,MAOND,EAAIG,EAAGJ,EAAMK,KAPP,0BAAAH,EAAA,MAQND,EAAII,EAAGC,IARD,QASZN,EAAMI,GAAKJ,EAAMK,GACjBL,EAAMK,GAAKC,EAVC,UAGgBD,EAHhB,0CAAAH,EAAA,MAaVD,EAAIS,EAAOV,EAAMI,EAAI,KAbX,2BAAAF,EAAA,MAcVD,EAAIG,EAAI,EAAGJ,EAAMU,KAdP,iBAee,CAACV,EAAMU,GAAQV,EAAMI,EAAI,IAAvDJ,EAAMI,EAAI,GAfK,KAeDJ,EAAMU,GAfL,uBAgBTN,EAAI,GAhBK,uCAkBZQ,EAAS,SAATA,EAAeZ,EAAgBS,EAAcC,EAAeT,GAAnD,eAAAC,EAAAC,OAAA,qDACTM,EAAOC,GADE,kCAAAR,EAAA,MAEgBM,EAAUR,EAAOS,EAAMC,IAFvC,cAELC,EAFK,kBAAAT,EAAA,MAGLU,EAAOZ,EAAOS,EAAME,EAAQ,EAAGV,IAH1B,yBAAAC,EAAA,MAILU,EAAOZ,EAAOW,EAAQ,EAAGD,EAAOT,IAJ3B,sCAnBQ,WAAAC,EAAA,MA0BjBU,EAAOZ,EAAO,EAAGA,EAAM7B,OAAS,EAAG8B,IA1BlB,sCA6BZY,EAAa,SAAMb,EAAgBC,GAAtB,eAAAC,EAAAC,OAAA,uDAClBW,EAAa,SAAbA,EAAmBC,EAAeC,EAAeP,EAAcC,GAAlD,qBAAAR,EAAAC,OAAA,qDACbM,EAAO,GAAKC,GADC,wDAIXO,EAAMC,KAAKC,OAAOV,EAAOC,GAAS,GAJvB,WAAAR,EAAA,MAKXY,EAAWE,EAAMD,EAAMN,EAAMQ,IALlB,yBAAAf,EAAA,MAMXY,EAAWE,EAAMD,EAAME,EAAKP,IANjB,OAObN,EAAYK,EACZJ,EAAYY,EACZnF,EAAY2E,EATC,aAUVL,EAAIa,GAAOZ,EAAIK,GAVL,sBAWXM,EAAKZ,GAAKY,EAAKX,IAXJ,oCAAAH,EAAA,MAYLD,EAAInE,EAAGkF,EAAKZ,KAZP,QAabW,EAAKjF,GAAKkF,EAAKZ,KACbA,EAdW,2CAAAF,EAAA,MAgBLD,EAAInE,EAAGkF,EAAKX,KAhBP,QAiBbU,EAAKjF,GAAKkF,EAAKX,KACbA,EAlBW,UAoBbvE,EApBa,6BAsBVsE,EAAIa,GAtBM,oCAAAf,EAAA,MAuBPD,EAAInE,EAAGkF,EAAKZ,KAvBL,QAwBfW,EAAKjF,GAAKkF,EAAKZ,KACbtE,IAAKsE,EAzBQ,6BA2BVC,EAAIK,GA3BM,oCAAAR,EAAA,MA4BPD,EAAInE,EAAGkF,EAAKX,KA5BL,QA6BfU,EAAKjF,GAAKkF,EAAKX,KACbvE,IAAKuE,EA9BQ,uDADK,WAAAH,EAAA,MAkClBY,EAAWd,EAAD,YAAYA,GAAQ,EAAGA,EAAM7B,SAlCrB,sCAqCbiD,EAAW,SAAMpB,EAAgBC,GAAtB,iBAAAC,EAAAC,OAAA,uDAChBkB,EAAU,SAAVA,EAAgBC,EAAeC,EAAWnB,GAAhC,uBAAAF,EAAAC,OAAA,mDAEVO,EAAgB,EAAIN,EAAI,EACxBoB,EAAkBpB,GAFlBK,EAAe,EAAIL,EAAI,GAGhBmB,GAAKD,EAAIE,GAAWF,EAAIb,KACjCe,EAAUf,GACRC,EAAQa,GAAKD,EAAIE,GAAWF,EAAIZ,KAClCc,EAAUd,GACRc,IAAYpB,EARF,wBASNE,EAAegB,EAAIE,GATb,WAAAtB,EAAA,MAUND,EAAIG,EAAGkB,EAAIE,KAVL,0BAAAtB,EAAA,MAWND,EAAIuB,EAASlB,IAXP,iBAYa,CAACgB,EAAIE,GAAUF,EAAIlB,IAA3CkB,EAAIlB,GAZO,KAYHkB,EAAIE,GAZD,iBAAAtB,EAAA,MAaNmB,EAAQC,EAAKC,EAAGC,IAbV,uCAgBVC,EAAY,SAAMH,GAAN,uBAAApB,EAAAC,OAAA,gDACVhC,EAAiBmD,EAAInD,OAClBiC,EAAIc,KAAKC,MAAMhD,EAAS,GAAK,EAFtB,YAEyBiC,GAAK,GAF9B,kCAAAF,EAAA,MAGRmB,EAAQC,EAAKnD,EAAQiC,IAHb,SAEmCA,EAFnC,sBAKPA,EAAIjC,EAAS,EALN,YAKSiC,EAAI,GALb,wBAMRE,EAAegB,EAAI,GANX,YAAApB,EAAA,MAORD,EAAIG,EAAGkB,EAAI,KAPH,2BAAApB,EAAA,MAQRD,EAAI,EAAGK,IARC,iBASK,CAACgB,EAAI,GAAIA,EAAIlB,IAA/BkB,EAAIlB,GATS,KASLkB,EAAI,GATC,iBAAApB,EAAA,MAURmB,EAAQC,EAAKlB,EAAG,IAVR,UAKkBA,EALlB,sDAjBI,WAAAF,EAAA,MA8BhBuB,EAAUzB,IA9BM,sCCKT0B,EA1EmB,SAAC,GAA4C,IAA1C1B,EAAyC,EAAzCA,MAAO1D,EAAkC,EAAlCA,MAAiBqF,GAAiB,EAA3BC,SAA2B,EAAjBD,YACrDtF,EAAiB,IAAO2D,EAAM7B,OAC9B0D,EAAuC,GACzCC,GAAoB,EACxBC,qBAAU,WAER,OAAO,WAAKD,GAAW,KACvB,CAAC9B,IACH,IAAMgC,EAAiB,SAAO5B,EAAWhE,GAAlB,iBAAA8D,EAAAC,OAAA,qDACf8B,EAAOJ,EAAUzB,IADF,uBAGb8B,EAAqBD,EAAKxF,MAAMiB,gBACtCuE,EAAKxF,MAAMiB,gBAAkB,2BAC7BuE,EAAKxF,MAAMC,OAASN,EAAM+F,WAAa,KALpB,WAAAjC,EAAA,MAMb,IAAIkC,SAAQ,SAACC,EAASC,GACtBR,GACFO,IAEFE,YAAW,kBAAIF,MAAW,IAAO/F,OAVhB,OAYnB2F,EAAKO,YAAcpG,EAAM+F,WACzBF,EAAKxF,MAAMiB,gBAAkBwE,EAbV,sCAiDvB,OACE,oCACE,yBAAKvG,UAAU,aACZqE,EAAMpE,KAAI,SAACC,EAAGC,GAAJ,OACT,kBAAC,EAAD,CAAKQ,MAAOA,EAAOP,IAAKD,EAAGM,MAAOP,EAAGQ,MAAOA,EAAOF,IAAK,SAAAA,GACtD0F,EAAU/F,GAAKK,SAIrB,yBAAKR,UAAU,iBAAiBmE,QAAS,kBAzC3B,4BAAAI,EAAAC,OAAA,mDAChB2B,GAAW,EACPH,IAAe5E,EAAM,GAFT,kCAAAmD,EAAA,MAGRH,EAAWC,EAAOgC,IAHV,iCAILL,IAAe5E,EAAM,GAJhB,mCAAAmD,EAAA,MAKRK,EAAUP,EAAOgC,IALT,kCAMLL,IAAe5E,EAAM,GANhB,oCAAAmD,EAAA,MAORW,EAAUb,EAAOgC,IAPT,mDAAA9B,EAAA,MASRkB,EAASpB,EAAOgC,IATR,WAWVS,EAAiCC,SAASC,cAAc,cACxDC,EAA6BF,SAASC,cAAc,WACtDF,IAAaG,GAAUd,EAbX,oCAAA5B,EAAA,MAcR,IAAIkC,SAAQ,SAACC,EAASC,GAC1BC,YAAW,WACTF,MACC,SAjBS,YAmBVP,EAnBU,0DAsBdc,EAAMnG,MAAMoG,QAAU,IACtBJ,EAAU9G,WAAa,aAvBT,YAAAuE,EAAA,MAwBR,IAAIkC,SAAQ,SAACC,EAASC,GAC1BI,SAASI,KAAKC,QAAUV,EACxBE,YAAW,kBAAIF,MAAW,SA1Bd,QA4BdO,EAAMnG,MAAMoG,QAAU,IACtBJ,EAAU9G,UAAY,YA7BR,sCAyCiCqH,KAC7C,oDC5COC,EA9Be,WAAO,IAAD,EACAvE,mBHJA,IGGA,mBAC3BE,EAD2B,KAChBP,EADgB,OAERK,mBHJS,KGED,mBAE3BpC,EAF2B,KAEpBgC,EAFoB,OAGZI,mBHJW,KGCC,mBAG3BI,EAH2B,KAGtBP,EAHsB,OAIEG,mBAAiB3B,EAAM,IAJzB,mBAI3B4E,EAJ2B,KAIfuB,EAJe,OAKRxE,mBAAmB,IALX,mBAK3BsB,EAL2B,KAKpB4B,EALoB,KAM5BuB,EAAW,SAACvE,EAAmBE,GAEnC,IADA,IAAMsE,EAAuB,GACpBhD,EAAI,EAAGA,EAAIxB,IAAawB,EAAG,CAClC,IAAMiD,EAASnC,KAAKC,MAAMD,KAAKoC,SAAWxE,GAC1CsE,EAAWG,KAAKF,EAAS,GAAK,GAAKA,GAErCzB,EAASwB,IAKX,OAHArB,qBAAU,WACRoB,EAASvE,EAAWE,KACnB,CAACF,EAAWE,EAAKxC,EAAOqF,IAEzB,yBAAKhG,UAAU,aACb,kBAAC,EAAD,CAAU0C,aAAcA,EAAcC,SAAUA,EAAUC,OAAQA,EAChEE,WAAY0E,EAAU3E,UAAW0E,IACnC,kBAAC,EAAD,CAAUlD,MAAOA,EAAO1D,MAAOA,EAAOsF,SAAUA,EAAUD,WAAYA,IACtE,yBAAKhG,UAAU,QAAQ6H,cAAY,OAAOC,gBAAc,OACtDC,gBAAc,QADhB,aCdSC,G,MATO,WACpB,OACE,yBAAKhI,UAAU,OACb,kBAAC,EAAD,CAAQF,MAAM,yBACd,kBAAC,EAAD,SCGcmI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASyB,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.630fb0f6.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  text?: string[];\n  title: string;\n}\n\nconst Header: React.FC<Props> = ({title, text}) => {\n return (\n   <div className=\"header\">\n     <header className=\"header-content\">\n       <h2 className=\"header-title\">\n         {title}\n       </h2>\n      {text ? text.map((v, k) => {\n        return <h3 key={k}>{v}</h3>\n      }) : <></>}\n     </header>\n   </div>\n )\n}\n\nexport default Header;","import React, { forwardRef, createRef } from 'react';\n\n\ninterface Props {\n  value: number;\n  width: number;\n  speed: number;\n}\ntype Ref = HTMLDivElement;\n\nconst Bar = forwardRef<Ref, Props>((props, ref) => {\n  const { value, width, speed } = props;\n  const myRef = createRef<HTMLDivElement>();\n  return (\n    <>\n      <div ref={myRef}>\n        <div ref={ref}\n          style={{\n            height: value, width: width, transition: `height ${2000 / speed}ms ease`,\n            color: 'white', overflowWrap: \"break-word\",\n            textAlign: \"center\"\n          }}>\n          {props.value}\n        </div>\n      </div>\n    </>\n  )\n})\n\n\n\n\nexport default Bar;","import React, { useState } from 'react';\nimport Select, { ValueType, GroupType } from 'react-select';\n\nexport const default_size: number = 50;\nexport const default_speed: number = 500;\nexport const default_max: number = 250;\n\nexport const algos: string[] = ['bubble sort', 'quick sort', 'merge sort', 'heap sort']\ntype Option = { value: string, label: string }\nconst algoOptions = algos.reduce((algo: Option[], item: string) => {\n  return [...algo, { value: item, label: item }]\n}, [])\n\nconst groupStyles: React.CSSProperties = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n};\n\nconst groupBadgeStyles: React.CSSProperties = {\n  backgroundColor: '#EBECF0',\n  borderRadius: '2em',\n  color: '#172B4D',\n  display: 'inline-block',\n  fontWeight: 'normal',\n  lineHeight: '1',\n  minWidth: 1,\n  padding: '0.16666666666667em 0.5em',\n  textAlign: 'center',\n}\n\nconst formatGroupLabel: React.FC<GroupType<Option>> = (data) => (\n  <div style={groupStyles}>\n    <span>{data.label}</span>\n    <span style={groupBadgeStyles}>{data.options.length}</span>\n  </div>\n);\n\ninterface SettingInfo {\n  setArraySize: (arraySize: number) => void;\n  setSpeed: (speed: number) => void;\n  setMax: (max: number) => void;\n  setOption: (option: string) => void;\n  regenerate: (arraySize: number, max: number) => void;\n}\n\nexport const Settings: React.FC<SettingInfo> = ({ setArraySize, setSpeed, setMax, setOption, regenerate }) => {\n  const [speed, setInnerSpeed] = useState<number>(default_speed);\n  const [arraySize, setInnerArraySize] = useState<number>(default_size);\n  const [max, setInnerMax] = useState<number>(default_max);\n  const [selectedOption, setSelectedOption] = useState<ValueType<Option>>(algoOptions[0]);\n  return (\n    <div className=\"setting-container\">\n      <div className=\"sorting-speed\">\n        <label htmlFor=\"speed\">Speed:</label>\n        <input name=\"speed\" type=\"range\" min={10} max={1000} value={speed}\n          onChange={e => {\n            setInnerSpeed(+e.target.value);\n            setSpeed(+e.target.value);\n          }} />\n      </div>\n      <div className=\"input-size\">\n        <input type=\"text\" name=\"arraySize\" value={arraySize}\n          onChange={e =>\n            setInnerArraySize(!isNaN(+e.target.value) ? +e.target.value : default_size)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              const value = (+e.currentTarget.value < 10 ? 10 :\n                (+e.currentTarget.value > 100) ? 100 : +e.currentTarget.value);\n              setInnerArraySize(value);\n              setArraySize(value);\n            }\n          }\n          } required />\n        <label htmlFor=\"arraySize\">\n          Size:\n        </label>\n      </div>\n      <div className=\"max-number\">\n        <input type=\"text\" value={max}\n          onChange={e => setInnerMax(!isNaN(+e.target.value) ? +e.target.value : default_max)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              const value = (+e.currentTarget.value < 20 ? 20 :\n                (+e.currentTarget.value > 500) ? 500 : +e.currentTarget.value);\n              setInnerMax(value);\n              setMax(value);\n            }\n          }} name=\"maxNumber\" required />\n        <label htmlFor=\"maxNumber\">\n          Max value:\n        </label>\n      </div>\n      <div className=\"select-class\">\n        <Select\n          className='select-class'\n          placeholder=\"Algorithms:\"\n          value={selectedOption}\n          onChange={(e: ValueType<Option>) => {\n            setSelectedOption(e);\n            if (e) {\n              setOption((e as Option).value);\n            }\n          }}\n          options={algoOptions}\n          formatGroupLabel={formatGroupLabel}\n        />\n      </div>\n      <div>\n        <button onClick={() => regenerate(arraySize, max)}>\n          Regenerate!!\n        </button>\n      </div>\n    </div>\n  )\n}\n","type SetFun = (i:number, value: number) =>void;\n\nexport const bubbleSort = async(array:number[], set:SetFun) => {\n  for (let i = 0; i < array.length - 1; ++i) {\n    for (let j = i + 1; j < array.length; ++j) {\n      if (array[i] > array[j]) {\n        const temp = array[i];\n        await set(i, array[j]);\n        await set(j, temp);\n        array[i] = array[j];\n        array[j] = temp;\n      }\n    }\n  }\n} \n\nexport const quickSort = async(array:number[], set:SetFun) => {\n  const partition = async(array:number[], left: number, right: number):Promise<number> => {\n    let pivot = array[right];\n    let i = left - 1;\n    for (let j = left; j < right; ++j) {\n      if (array[j] < pivot) {\n        ++i;\n        const temp:number = array[i];\n        await set(i, array[j]);\n        await set(j, temp);\n        array[i] = array[j];\n        array[j] = temp;\n      }\n    }\n    await set(right, array[i + 1]);\n    await set(i + 1, array[right]);\n    [array[i + 1], array[right]] = [array[right], array[i + 1]]\n    return i + 1;\n  }\n  const _qsort = async(array:number[], left: number, right: number, set:SetFun) => {\n    if (left < right) {\n      const pivot:number = await partition(array, left, right);\n      await _qsort(array, left, pivot - 1, set);\n      await _qsort(array, pivot + 1, right, set);\n    }\n  }\n  await _qsort(array, 0, array.length - 1, set);\n} \n\nexport const mergeSort  = async(array:number[], set:SetFun) => {\n  const _mergeSort = async(arr1:number[], arr2:number[], left: number, right: number): Promise<void> => {\n    if (left + 1 >= right) {\n      return\n    }\n    const mid = Math.floor((left + right) / 2);\n    await _mergeSort(arr2, arr1, left, mid);\n    await _mergeSort(arr2, arr1, mid, right);\n    let i: number = left;\n    let j: number = mid;\n    let k: number = left;\n    while (i < mid && j < right) {\n      if (arr2[i] < arr2[j]) {\n          await set(k, arr2[i]);\n        arr1[k] = arr2[i];\n        ++i;\n      } else {\n          await set(k, arr2[j]);\n        arr1[k] = arr2[j];\n        ++j;\n      }\n      ++k;\n    }\n    while (i < mid) {\n        await set(k, arr2[i]);\n      arr1[k] = arr2[i];\n      ++k; ++i;\n    }\n    while (j < right) {\n        await set(k, arr2[j]);\n      arr1[k] = arr2[j];\n      ++k; ++j;\n    }\n  }\n  await _mergeSort(array, [...array], 0, array.length);\n} \n\nexport const heapSort = async(array:number[], set:SetFun) => {\n  const heapify = async(arr: number[], n: number, i: number): Promise<void> => {\n    let left: number = 2 * i + 1;\n    let right: number = 2 * i + 2;\n    let largest: number = i;\n    if (left < n && arr[largest] < arr[left])\n      largest = left;\n    if (right < n && arr[largest] < arr[right])\n      largest = right;\n    if (largest !== i) {\n      const temp: number = arr[largest];\n      await set(i, arr[largest]);\n      await set(largest, temp);\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      await heapify(arr, n, largest);\n    }\n  }\n  const _heapSort = async(arr: number[]): Promise<void> => {\n    const length: number = arr.length;\n    for (let i = Math.floor(length / 2) - 1; i >= 0; --i) {\n      await heapify(arr, length, i);\n    }\n    for (let i = length - 1; i > 0; --i) {\n      const temp: number = arr[0]; \n      await set(i, arr[0]);\n      await set(0, temp);\n      [arr[i], arr[0]] = [arr[0], arr[i]];\n      await heapify(arr, i, 0);\n    }\n  }\n  await _heapSort(array);\n}\n\n","import React, { useEffect } from 'react';\nimport Bar from './Bar';\nimport { algos } from './Settings';\nimport { bubbleSort, quickSort, mergeSort, heapSort } from './Algorithms'\n\ninterface Props {\n  array: number[];\n  speed: number;\n  algoOption: string;\n  setArray?: React.Dispatch<React.SetStateAction<number[]>>;\n}\n\n\nconst BarChart: React.FC<Props> = ({ array, speed, setArray, algoOption }) => {\n  const width: number = (1000 / array.length);\n  const refsArray: (HTMLDivElement | null)[] = [];\n  let rerender: boolean = false;\n  useEffect(()=>{\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return ()=>{rerender = true};\n  },[array]);\n  const changeBarValue = async (i: number, value: number): Promise<void> => {\n    const node = refsArray[i];\n    if (node) {\n      const old_bgColor:string = node.style.backgroundColor;\n      node.style.backgroundColor = \"rgba(0, 140, 255, 0.712)\";\n      node.style.height = value.toString() + 'px';\n      await new Promise((resolve, _) => {\n        if (rerender) {\n          resolve();\n        }\n        setTimeout(()=>resolve(), 3000 / speed)\n      })\n      node.textContent = value.toString();\n      node.style.backgroundColor = old_bgColor;\n    }\n  }\n\n  const sortStart = async() => {\n    rerender = false;\n    if (algoOption === algos[0]) {\n      await bubbleSort(array, changeBarValue);\n    } else if (algoOption === algos[1]) {\n      await quickSort(array, changeBarValue);\n    } else if (algoOption === algos[2]) {\n      await mergeSort(array, changeBarValue);\n    } else {\n      await heapSort(array, changeBarValue);\n    }\n    const container: HTMLDivElement|null = document.querySelector(\".container\");\n    const modal: HTMLDivElement|null = document.querySelector(\".modal\");\n    if (container && modal && !rerender) {\n      await new Promise((resolve, _) => {\n        setTimeout(()=>{\n          resolve()\n        }, 100);\n      });\n      if (rerender) {\n        return;\n      }\n      modal.style.opacity = \"1\";\n      container.className += \" modalBlur\";\n      await new Promise((resolve, _) => {\n        document.body.onclick = resolve;\n        setTimeout(()=>resolve(), 2000);\n      });\n      modal.style.opacity = \"0\";\n      container.className = \"container\";\n    }\n  }\n  return (\n    <>\n      <div className=\"bar-chart\">\n        {array.map((v, k) =>\n          <Bar speed={speed} key={k} value={v} width={width} ref={ref => {\n            refsArray[k] = ref;\n          }} />\n        )}\n      </div>\n      <div className=\"sorting-button\" onClick={() => sortStart()}>\n        <button>Start Sorting</button>\n      </div>\n    </>\n  )\n}\n\n\nexport default BarChart;","import React, { useState, useEffect } from 'react';\nimport BarChart from './BarChart';\nimport { Settings, default_size, default_max, default_speed, algos } from './Settings';\n\n\n\nconst Content: React.FC<{}> = () => {\n  const [arraySize, setArraySize] = useState<number>(default_size);\n  const [speed, setSpeed] = useState<number>(default_speed);\n  const [max, setMax] = useState<number>(default_max);\n  const [algoOption, setAlgoOption] = useState<string>(algos[0]);\n  const [array, setArray] = useState<number[]>([])\n  const generate = (arraySize: number, max: number) => {\n    const array_data: number[] = [];\n    for (let i = 0; i < arraySize; ++i) {\n      const number = Math.floor(Math.random() * max);\n      array_data.push(number < 20 ? 20 : number);\n    }\n    setArray(array_data);\n  }\n  useEffect(() => {\n    generate(arraySize, max);\n  }, [arraySize, max, speed, algoOption])\n  return (\n    <div className=\"container\">\n      <Settings setArraySize={setArraySize} setSpeed={setSpeed} setMax={setMax} \n        regenerate={generate} setOption={setAlgoOption}/>\n      <BarChart array={array} speed={speed} setArray={setArray} algoOption={algoOption}/>\n      <div className=\"modal\" aria-hidden=\"true\" data-backdrop=\"true\" \n        data-keyboard=\"true\">\n        Done!!!\n      </div>\n    </div>\n  )\n}\n\nexport default Content\n","import React from 'react';\nimport Header from './components/Header'; \nimport Content from './components/Content'; \nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header title=\"Sorting Algo project\"/>\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}