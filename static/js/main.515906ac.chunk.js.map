{"version":3,"sources":["components/Header.tsx","components/Bar.tsx","components/Algorithms.tsx","components/BarChart.tsx","components/Content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","title","text","className","map","v","k","key","Bar","forwardRef","props","ref","value","width","speed","myRef","createRef","style","height","transition","color","overflowWrap","textAlign","bubbleSort","array","set","a","async","i","length","j","temp","quickSort","partition","left","right","pivot","_qsort","mergeSort","_mergeSort","arr1","arr2","mid","Math","floor","heapSort","heapify","arr","n","largest","_heapSort","BarChart","algoOption","setArray","refsArray","changeBarValue","node","backgroundColor","Promise","resolve","_","toString","setTimeout","textContent","onClick","algos","container","document","querySelector","modal","display","sortStart","algoOptions","reduce","algo","item","label","groupStyles","alignItems","justifyContent","groupBadgeStyles","borderRadius","fontWeight","lineHeight","minWidth","padding","formatGroupLabel","data","options","Setting","setArraySize","setSpeed","setMax","setOption","regenerate","useState","setInnerSpeed","arraySize","setInnerArraySize","max","setInnerMax","selectedOption","setSelectedOption","htmlFor","name","type","min","onChange","e","target","isNaN","onKeyDown","currentTarget","required","placeholder","Content","setAlgoOption","generate","array_data","number","random","push","useEffect","aria-hidden","data-backdrop","data-keyboard","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.515906ac.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  text?: string[];\n  title: string;\n}\n\nconst Header: React.FC<Props> = ({title, text}) => {\n return (\n   <div className=\"header\">\n     <header className=\"header-content\">\n       <h2 className=\"header-title\">\n         {title}\n       </h2>\n      {text ? text.map((v, k) => {\n        return <h3 key={k}>{v}</h3>\n      }) : <></>}\n     </header>\n   </div>\n )\n}\n\nexport default Header;","import React, { forwardRef, createRef } from 'react';\n\n\ninterface Props {\n  value: number;\n  width: number;\n  speed: number;\n}\ntype Ref = HTMLDivElement;\n\nconst Bar = forwardRef<Ref, Props>((props, ref) => {\n  const { value, width, speed } = props;\n  const myRef = createRef<HTMLDivElement>();\n  return (\n    <>\n      <div ref={myRef}>\n        <div ref={ref}\n          style={{\n            height: value, width: width, transition: `height ${3 / speed}s ease`,\n            color: 'white', overflowWrap: \"break-word\",\n            textAlign: \"center\"\n          }}>\n          {props.value}\n        </div>\n      </div>\n    </>\n  )\n})\n\n\n\n\nexport default Bar;","type SetFun = (i:number, value: number) =>void;\n\nexport const bubbleSort = async(array:number[], set:SetFun) => {\n  for (let i = 0; i < array.length - 1; ++i) {\n    for (let j = i + 1; j < array.length; ++j) {\n      if (array[i] > array[j]) {\n        const temp = array[i];\n        await set(i, array[j]);\n        await set(j, temp);\n        array[i] = array[j];\n        array[j] = temp;\n      }\n    }\n  }\n} \n\nexport const quickSort = async(array:number[], set:SetFun) => {\n  const partition = async(array:number[], left: number, right: number):Promise<number> => {\n    let pivot = array[right];\n    let i = left - 1;\n    for (let j = left; j < right; ++j) {\n      if (array[j] < pivot) {\n        ++i;\n        const temp:number = array[i];\n        await set(i, array[j]);\n        await set(j, temp);\n        array[i] = array[j];\n        array[j] = temp;\n      }\n    }\n    await set(right, array[i + 1]);\n    await set(i + 1, array[right]);\n    [array[i + 1], array[right]] = [array[right], array[i + 1]]\n    return i + 1;\n  }\n  const _qsort = async(array:number[], left: number, right: number, set:SetFun) => {\n    if (left < right) {\n      const pivot:number = await partition(array, left, right);\n      await _qsort(array, left, pivot - 1, set);\n      await _qsort(array, pivot + 1, right, set);\n    }\n  }\n  await _qsort(array, 0, array.length - 1, set);\n} \n\nexport const mergeSort  = async(array:number[], set:SetFun) => {\n  const _mergeSort = async(arr1:number[], arr2:number[], left: number, right: number): Promise<void> => {\n    if (left + 1 >= right) {\n      return\n    }\n    const mid = Math.floor((left + right) / 2);\n    await _mergeSort(arr2, arr1, left, mid);\n    await _mergeSort(arr2, arr1, mid, right);\n    let i: number = left;\n    let j: number = mid;\n    let k: number = left;\n    while (i < mid && j < right) {\n      if (arr2[i] < arr2[j]) {\n          await set(k, arr2[i]);\n        arr1[k] = arr2[i];\n        ++i;\n      } else {\n          await set(k, arr2[j]);\n        arr1[k] = arr2[j];\n        ++j;\n      }\n      ++k;\n    }\n    while (i < mid) {\n        await set(k, arr2[i]);\n      arr1[k] = arr2[i];\n      ++k; ++i;\n    }\n    while (j < right) {\n        await set(k, arr2[j]);\n      arr1[k] = arr2[j];\n      ++k; ++j;\n    }\n  }\n  await _mergeSort(array, [...array], 0, array.length);\n} \n\nexport const heapSort = async(array:number[], set:SetFun) => {\n  const heapify = async(arr: number[], n: number, i: number): Promise<void> => {\n    let left: number = 2 * i + 1;\n    let right: number = 2 * i + 2;\n    let largest: number = i;\n    if (left < n && arr[largest] < arr[left])\n      largest = left;\n    if (right < n && arr[largest] < arr[right])\n      largest = right;\n    if (largest !== i) {\n      const temp: number = arr[largest];\n      await set(i, arr[largest]);\n      await set(largest, temp);\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      await heapify(arr, n, largest);\n    }\n  }\n  const _heapSort = async(arr: number[]): Promise<void> => {\n    const length: number = arr.length;\n    for (let i = Math.floor(length / 2) - 1; i >= 0; --i) {\n      await heapify(arr, length, i);\n    }\n    for (let i = length - 1; i > 0; --i) {\n      const temp: number = arr[0]; \n      await set(i, arr[0]);\n      await set(0, temp);\n      [arr[i], arr[0]] = [arr[0], arr[i]];\n      await heapify(arr, i, 0);\n    }\n  }\n  await _heapSort(array);\n}\n\n","import React from 'react';\nimport Bar from './Bar';\nimport { algos } from './Content';\nimport { bubbleSort, quickSort, mergeSort, heapSort } from './Algorithms'\n\ninterface Props {\n  array: number[];\n  speed: number;\n  algoOption: string;\n  setArray?: React.Dispatch<React.SetStateAction<number[]>>;\n}\n\n\nconst BarChart: React.FC<Props> = ({ array, speed, setArray, algoOption }) => {\n  const width: number = (1000 / array.length);\n  const refsArray: (HTMLDivElement | null)[] = [];\n  const changeBarValue = async (i: number, value: number): Promise<void> => {\n    const node = refsArray[i];\n    if (node) {\n      node.style.backgroundColor = \"rgba(0, 140, 255, 0.712)\";\n      await new Promise((resolve, _) => {\n        node.style.height = value.toString() + 'px';\n        setTimeout(()=>resolve(), 300 / speed)\n      })\n      node.textContent = value.toString();\n      node.style.backgroundColor = \"rgb(104, 104, 104)\";\n    }\n  }\n  const sortStart = async() => {\n    if (algoOption === algos[0]) {\n      await bubbleSort(array, changeBarValue);\n    } else if (algoOption === algos[1]) {\n      await quickSort(array, changeBarValue);\n    } else if (algoOption === algos[2]) {\n      await mergeSort(array, changeBarValue);\n    } else {\n      await heapSort(array, changeBarValue);\n    }\n    const container: HTMLDivElement|null = document.querySelector(\".container\");\n    const modal: HTMLDivElement|null = document.querySelector(\".modal\");\n    if (container && modal) {\n      await new Promise((resolve, _) => {\n        setTimeout(()=>resolve(), 3000 / speed);\n      });\n      container.className += \" modalBlur\";\n      modal.style.display = \"block\";\n      await new Promise((resolve, _) => {\n        setTimeout(()=>resolve(), 1200);\n      });\n      modal.style.display = \"none\";\n      container.className = \"container\";\n    }\n  }\n  return (\n    <>\n      <div className=\"bar-chart\">\n        {array.map((v, k) =>\n          <Bar speed={speed} key={k} value={v} width={width} ref={ref => {\n            refsArray[k] = ref;\n          }} />\n        )}\n      </div>\n      <div className=\"sorting-button\" onClick={() => sortStart()}>\n        <button>Start Sorting</button>\n      </div>\n    </>\n  )\n}\n\n\nexport default BarChart;","import React, { useState, useEffect } from 'react';\nimport BarChart from './BarChart';\nimport Select from 'react-select';\n\nconst default_size: number = 50;\nconst default_speed: number = 50;\nconst default_max: number = 250;\n\nexport const algos: string[] = ['bubble sort', 'quick sort', 'merge sort', 'heap sort']\ntype Option = { value: string, label: string }\nconst algoOptions = algos.reduce((algo: Option[], item: string) => {\n                     return [...algo, { value: item, label: item }] \n                    },[])\n\nconst groupStyles = {\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between',\n};\n\nconst groupBadgeStyles:React.CSSProperties = {\n  backgroundColor: '#EBECF0',\n  borderRadius: '2em',\n  color: '#172B4D',\n  display: 'inline-block',\n  fontWeight: 'normal',\n  lineHeight: '1',\n  minWidth: 1,\n  padding: '0.16666666666667em 0.5em',\n  textAlign: 'center',\n};\n\nconst formatGroupLabel:React.FC<any> = (data) => (\n  <div style={groupStyles}>\n    <span>{data.label}</span>\n    <span style={groupBadgeStyles}>{data.options.length}</span>\n  </div>\n);\n\ninterface SettingInfo {\n  setArraySize: (arraySize: number) => void;\n  setSpeed: (speed: number) => void;\n  setMax: (max: number) => void;\n  setOption: (option: string) => void;\n  regenerate: (arraySize: number, max: number) => void;\n}\n\nconst Setting: React.FC<SettingInfo> = ({ setArraySize, setSpeed, setMax, setOption, regenerate }) => {\n  const [speed, setInnerSpeed] = useState<number>(default_speed);\n  const [arraySize, setInnerArraySize] = useState<number>(default_size);\n  const [max, setInnerMax] = useState<number>(default_max);\n  const [selectedOption, setSelectedOption] = useState<any>(algoOptions[0]);\n  return (\n    <div className=\"setting-container\">\n      <div className=\"sorting-speed\">\n        <label htmlFor=\"speed\">Speed:</label>\n        <input name=\"speed\" type=\"range\" min={10} max={100} value={speed}\n          onChange={e => {\n            setInnerSpeed(+e.target.value);\n            setSpeed(+e.target.value);\n          }} />\n      </div>\n      <div className=\"input-size\">\n        <input type=\"text\" name=\"arraySize\" value={arraySize}\n          onChange={e => setInnerArraySize(!isNaN(+e.target.value) ? +e.target.value : default_size)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              const value = (+e.currentTarget.value < 10 ? 10 :\n                (+e.currentTarget.value > 100) ? 100 : +e.currentTarget.value);\n              setInnerArraySize(value);\n              setArraySize(value);\n            }\n          }\n          } required />\n        <label htmlFor=\"arraySize\">\n          Size:\n        </label>\n      </div>\n      <div className=\"max-number\">\n        <input type=\"text\" value={max}\n          onChange={e => setInnerMax(!isNaN(+e.target.value) ? +e.target.value : default_max)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              const value = (+e.currentTarget.value < 20 ? 20 :\n                (+e.currentTarget.value > 500) ? 500 : +e.currentTarget.value);\n              setInnerMax(value);\n              setMax(value);\n            }\n          }} name=\"maxNumber\" required />\n        <label htmlFor=\"maxNumber\">\n          Max value:\n        </label>\n      </div>\n      <div className=\"select-class\">\n      <Select\n        className='select-class'\n        placeholder=\"Algorithms:\"\n        value={selectedOption}\n        onChange={(e)=>{\n          setSelectedOption(e);\n          if (e) {\n            setOption(e.value)\n          }\n        }}\n        options={algoOptions}\n        formatGroupLabel={formatGroupLabel}\n      />\n      </div>\n      <div>\n        <button onClick={() => regenerate(arraySize, max)}>\n          Regenerate!!\n        </button>\n      </div>\n    </div>\n  )\n}\n\nconst Content: React.FC<{}> = () => {\n  const [arraySize, setArraySize] = useState<number>(default_size);\n  const [speed, setSpeed] = useState<number>(default_speed);\n  const [max, setMax] = useState<number>(default_max);\n  const [algoOption, setAlgoOption] = useState<string>(algos[0]);\n  const [array, setArray] = useState<number[]>([])\n  const generate = (arraySize: number, max: number) => {\n    const array_data: number[] = [];\n    for (let i = 0; i < arraySize; ++i) {\n      const number = Math.floor(Math.random() * max);\n      array_data.push(number < 20 ? 20 : number);\n    }\n    setArray(array_data);\n  }\n  useEffect(() => {\n    generate(arraySize, max);\n  }, [arraySize, max, speed, algoOption])\n  return (\n    <div className=\"container\">\n      <Setting setArraySize={setArraySize} setSpeed={setSpeed} setMax={setMax} regenerate={generate} \n        setOption={setAlgoOption}/>\n      <BarChart array={array} speed={speed} setArray={setArray} algoOption={algoOption}/>\n      <div className=\"modal\" aria-hidden=\"true\" data-backdrop=\"true\" data-keyboard=\"true\">\n        Done!\n      </div>\n    </div>\n  )\n}\n\nexport default Content\n","import React from 'react';\nimport Header from './components/Header'; \nimport Content from './components/Content'; \nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header title=\"Sorting Algo project\"/>\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}