{"version":3,"sources":["components/Settings.tsx","components/Header.tsx","components/Content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Select","memo","lazy","algos","algoOptions","reduce","algo","item","value","label","formatGroupLabel","data","className","options","length","Settings","setArraySize","setSpeed","setMax","setOption","regenerate","defaultSpeed","defaultSize","defaultMax","useState","speed","setInnerSpeed","arraySize","setInnerArraySize","max","setInnerMax","selectedOption","setSelectedOption","submitArraySize","useCallback","val","submitMaxVal","htmlFor","name","type","min","onChange","e","target","isNaN","onKeyDown","key","currentTarget","required","placeholder","onClick","Header","title","text","map","v","k","BarChart","Content","algoOption","setAlgoOption","array","setArray","generate","array_data","i","number","Math","floor","random","push","useEffect","fallback","aria-hidden","data-backdrop","data-keyboard","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99cc1542.chunk.js","sourcesContent":["import React, { useState, lazy, useCallback, memo } from 'react';\nimport { ValueType, GroupType } from 'react-select';\n\nconst Select = memo(lazy(()=> import('react-select')));\n\n\nexport const algos: string[] = ['bubble sort', 'quick sort', 'merge sort', 'heap sort']\ntype Option = { value: string, label: string }\nconst algoOptions = algos.reduce((algo: Option[], item: string) => {\n  return [...algo, { value: item, label: item }]\n}, [])\n\nconst formatGroupLabel: React.FC<GroupType<Option>> = (data) => (\n  <div className=\"group-styles\">\n    <span>{data.label}</span>\n    <span className='group-badge-styles'>{data.options.length}</span>\n  </div>\n);\n\ninterface SettingInfo {\n  setArraySize: (arraySize: number) => void;\n  setSpeed: (speed: number) => void;\n  setMax: (max: number) => void;\n  setOption: (option: string) => void;\n  regenerate: (arraySize: number, max: number) => void;\n  defaultSpeed: number;\n  defaultSize: number;\n  defaultMax: number;\n}\n\nconst Settings: React.FC<SettingInfo> = ({ \n  setArraySize, setSpeed, setMax, setOption, regenerate,\n  defaultSpeed, defaultSize, defaultMax\n }) => {\n  const [speed, setInnerSpeed] = useState<number>(defaultSpeed);\n  const [arraySize, setInnerArraySize] = useState<number>(defaultSize);\n  const [max, setInnerMax] = useState<number>(defaultMax);\n  const [selectedOption, setSelectedOption] = useState<ValueType<Option>>(algoOptions[0]);\n  const submitArraySize = useCallback((value:number): void => {\n    const val = (+value < 10 ? 10 : (+value > 100) ? 100 : +value);\n    setInnerArraySize(val);\n    setArraySize(val);\n  }, [setArraySize]);\n  const submitMaxVal = useCallback((value:number): void => {\n    const val = (value < 20 ? 20 : (value > 500) ? 500 : value);\n    setInnerMax(val);\n    setMax(val);\n  }, [setMax]);\n  return (\n    <div className=\"setting-container\">\n      <div className=\"sorting-speed\">\n        <label htmlFor=\"speed\">Speed:</label>\n        <input name=\"speed\" type=\"range\" min={10} max={1000} value={speed}\n          onChange={e => {\n            setInnerSpeed(+e.target.value);\n            setSpeed(+e.target.value);\n          }} />\n      </div>\n      <div className=\"input-size\">\n        <input type=\"text\" name=\"arraySize\" value={arraySize} \n          onChange={e =>\n            setInnerArraySize(!isNaN(+e.target.value) ? +e.target.value : defaultSize)}\n          onKeyDown={(e) => e.key === 'Enter' && submitArraySize(+e.currentTarget.value)} required />\n        <label htmlFor=\"arraySize\">\n          Size (10 or above):\n        </label>\n      </div>\n      <div className=\"max-number\">\n        <input type=\"text\" value={max}\n          onChange={e => setInnerMax(!isNaN(+e.target.value) ? +e.target.value : defaultMax)}\n          onKeyDown={(e) => e.key === 'Enter' && submitMaxVal(+e.currentTarget.value)} \n          name=\"maxNumber\" required />\n        <label htmlFor=\"maxNumber\">\n          Max value (20 or above):\n        </label>\n      </div>\n      <div className=\"select-class\">\n        <Select\n          className='select-class'\n          placeholder=\"Algorithms:\"\n          value={selectedOption}\n          onChange={(e: ValueType<Option>) => {\n            setSelectedOption(e);\n            e && setOption((e as Option).value);\n          }}\n          options={algoOptions}\n          formatGroupLabel={formatGroupLabel}\n        />\n      </div>\n      <div>\n        <button  className=\"setting-button\" onClick={() => {\n          submitArraySize(arraySize);\n          submitMaxVal(max);\n          regenerate(arraySize, max)\n        }}>\n          Regenerate!!\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Settings;\n","import React from 'react';\n\ninterface Props {\n  title: string;\n  text?: string[];\n}\n\nconst Header: React.FC<Props> = ({title, text}) => {\n return (\n   <div className=\"header\">\n     <header className=\"header-content\">\n       <h2 className=\"header-title\">\n         {title}\n       </h2>\n      {text && text.map((v, k) => <div key={k}>{v}</div>) }\n     </header>\n   </div>\n )\n}\n\nexport default Header;","import React, { useState, useEffect, lazy, Suspense } from 'react';\nimport { algos } from 'components/Settings';\n\nconst BarChart = lazy(() => import('./BarChart'));\nconst Settings = lazy(() => import('./Settings'));\nconst defaultSize: number = 50;\nconst defaultSpeed: number = 500;\nconst defaultMax: number = 250;\nconst minArrayValue: number = 20;\n\nconst Content: React.FC<{}> = () => {\n  const [arraySize, setArraySize] = useState<number>(defaultSize);\n  const [speed, setSpeed] = useState<number>(defaultSpeed);\n  const [max, setMax] = useState<number>(defaultMax);\n  const [algoOption, setAlgoOption] = useState<string>(algos[0]);\n  const [array, setArray] = useState<number[]>([])\n  const generate = (arraySize: number, max: number) => {\n    const array_data: number[] = [];\n    for (let i = 0; i < arraySize; ++i) {\n      const number = Math.floor(Math.random() * max);\n      array_data.push(number < minArrayValue ? minArrayValue : number);\n    }\n    setArray(array_data);\n  }\n  useEffect(() => {\n    generate(arraySize, max);\n  }, [arraySize, max, speed, algoOption])\n  return (\n    <Suspense fallback={()=><h3>Loading...</h3>}>\n      <div className=\"container\">\n        <Settings setArraySize={setArraySize} setSpeed={setSpeed} setMax={setMax} \n          regenerate={generate} setOption={setAlgoOption} \n          defaultSize={defaultSize} defaultMax={defaultMax} \n          defaultSpeed={defaultSpeed}/>\n        <BarChart array={array} speed={speed} setArray={setArray} algoOption={algoOption}/>\n        <div className=\"modal\" aria-hidden=\"true\" data-backdrop=\"true\" \n          data-keyboard=\"true\">\n          Done!!!\n        </div>\n      </div>\n    </Suspense>\n  )\n}\n\nexport default Content\n","import React from 'react';\nimport Header from './components/Header'; \nimport Content from './components/Content'; \nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header title=\"Sorting Algo project\"/>\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}